{"version":3,"sources":["components/Artist.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Artist","props","react_default","a","createElement","className","src","image","alt","name","songs","map","song","i","key","nameSong","onClick","like","dislike","App","state","artistAlbum","currentArtist","artists","handleNext","_this$state","_this","length","setState","handlePreview","handleUpDown","index","option","_this$state2","sort","b","handleDislike","_this$state3","_this2","this","promisesArtist","artist","fetch","concat","then","response","json","catch","err","console","error","Promise","all","arrArtist","dataArtist","albumArtist","arrAlbum","Object","values","toptracks","forEach","objSong","push","_this3","logo","components_Artist","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.d2204d99.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Artist = (props) => {\r\n  return (\r\n    <div>\r\n      <img className=\"imgArtist\" src={props.image} alt={props.name} />\r\n      <h3>{props.name}</h3>\r\n      {props.songs.map((song, i) =>\r\n        <div className=\"row song\" key={i}>\r\n          <span className=\"col-6 col-sm-7 text-left\">{song.nameSong}</span>\r\n          <i className=\"fas fa-heart col-1\" onClick={() => props.like(i, 'plus')}></i>\r\n          <i className=\"far fa-thumbs-down col-1\" onClick={() => props.dislike(i)}></i>\r\n          <span className=\"col-3\">{song.like}</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Artist","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Artist from './components/Artist'\r\n\r\n//Key API 108bddcd9fefc3e86bc16a18ad53e089\r\n\r\nclass App extends Component {\r\n  state = {\r\n    artistAlbum: [\r\n      'adele',\r\n      'rollingstone',\r\n      'madonna',\r\n      'michaeljackson',\r\n      'beatles',\r\n      'whitneyhouston',\r\n      'nirvana'\r\n    ],\r\n    currentArtist: 0,\r\n    artists: []\r\n  }\r\n\r\n  componentWillMount() {\r\n    const { artistAlbum } = this.state;\r\n    const promisesArtist = artistAlbum.map(artist =>\r\n      fetch(`https://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist=${artist}&api_key=108bddcd9fefc3e86bc16a18ad53e089&format=json`)\r\n        .then(response => response.json())\r\n        .catch(err => console.error(err))\r\n    )\r\n    Promise.all(promisesArtist)\r\n      .then(arrArtist => {\r\n        const dataArtist = arrArtist.map(albumArtist => {\r\n          const songs = [];\r\n          const arrAlbum = Object.values(albumArtist.toptracks);\r\n          arrAlbum[0].forEach(objSong => {\r\n            songs.push({\r\n              nameSong: objSong.name,\r\n              like: 0\r\n            })\r\n          });\r\n          return {\r\n            name: arrAlbum[1].artist,\r\n            image: arrAlbum[0][0].image[3]['#text'],\r\n            songs\r\n          }\r\n        })\r\n        this.setState({\r\n          artists: dataArtist\r\n        })\r\n      })\r\n  }\r\n\r\n  handleNext = () => {\r\n    const { currentArtist, artistAlbum } = this.state;\r\n    if (currentArtist === artistAlbum.length - 1) {\r\n      this.setState({ currentArtist: 0 })\r\n    } else {\r\n      this.setState({\r\n        currentArtist: currentArtist + 1\r\n      })\r\n    }\r\n  }\r\n\r\n  handlePreview = () => {\r\n    const { currentArtist } = this.state;\r\n    if (currentArtist === 0) {\r\n      this.setState({ currentArtist: 5 })\r\n    } else {\r\n      this.setState({\r\n        currentArtist: currentArtist - 1\r\n      })\r\n    }\r\n  }\r\n\r\n  handleUpDown = (index, option) => {\r\n    const { artists, currentArtist } = this.state;\r\n    option ? artists[currentArtist].songs[index].like++ : artists[currentArtist].songs[index].like--;\r\n    artists[currentArtist].songs.sort((a, b) => b.like - a.like);\r\n    this.setState({\r\n      artists\r\n    });\r\n  }\r\n\r\n  handleDislike = (index) => {\r\n    const { artists, currentArtist } = this.state;\r\n    if (artists[currentArtist].songs[index].like > 0) {\r\n      this.handleUpDown(index)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header className=\"App-header\">\r\n          <h2>\r\n            Ranking Songs\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          </h2>\r\n        </header>\r\n        {this.state.artists.length ? (\r\n          <div>\r\n            <i className=\"preview fas fa-angle-left\" onClick={this.handlePreview}></i>\r\n            <i className=\"next fas fa-angle-right\" onClick={this.handleNext}></i>\r\n            {this.state.artists.map((artist, i) =>\r\n              <Artist key={i}\r\n                name={artist.name}\r\n                image={artist.image}\r\n                songs={artist.songs}\r\n                like={this.handleUpDown}\r\n                dislike={this.handleDislike} />\r\n            )[this.state.currentArtist]}\r\n          </div>\r\n        ) : (<h3 className=\"loading\">Cargando <i className=\"loading-logo fas fa-spinner\"></i></h3>)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}