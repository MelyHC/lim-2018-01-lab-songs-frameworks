{"version":3,"sources":["components/Artist.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Artist","props","react_default","a","createElement","src","image","name","songs","map","song","i","key","nameSong","className","like","App","state","artistAlbum","currentArtist","artists","handleNext","_this$state","_this","length","setState","handlePreview","_this$state2","_this2","this","promisesArtist","artist","fetch","concat","then","response","json","catch","err","console","error","Promise","all","arrArtist","dataArtist","albumArtist","arrAlbum","Object","values","toptracks","forEach","objSong","push","logo","alt","onClick","components_Artist","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOAceA,SAZA,SAACC,GACd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,QAChBJ,EAAAC,EAAAC,cAAA,UAAKH,EAAMM,MACVN,EAAMO,MAAMC,IAAI,SAACC,EAAMC,GAAP,OACfT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKD,GAAID,EAAKG,SAAnB,IAA6BX,EAAAC,EAAAC,cAAA,KAAGU,UAAU,iBAAmBZ,EAAAC,EAAAC,cAAA,KAAGU,UAAU,uBAA0BJ,EAAKK,WCuFlGC,6MAvFbC,MAAQ,CACNC,YAAa,CACX,QACA,eACA,UACA,iBACA,UACA,kBAEFC,cAAe,EACfC,QAAS,MAiCXC,WAAa,WAAM,IAAAC,EACsBC,EAAKN,MAApCE,EADSG,EACTH,cACJA,IAFaG,EACMJ,YACWM,OAAS,EACzCD,EAAKE,SAAS,CAAEN,cAAe,IAE/BI,EAAKE,SAAS,CACZN,cAAeA,EAAgB,OAKrCO,cAAgB,WAAM,IAAAC,EACmBJ,EAAKN,MAApCE,EADYQ,EACZR,cADYQ,EACGT,YACD,IAAlBC,EACFI,EAAKE,SAAS,CAAEN,cAAe,IAE/BI,EAAKE,SAAS,CACZN,cAAeA,EAAgB,wFA/CjB,IAAAS,EAAAC,KAEZC,EADkBD,KAAKZ,MAArBC,YAC2BT,IAAI,SAAAsB,GAAM,OAC3CC,MAAK,wEAAAC,OAAyEF,EAAzE,0DACFG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,OAEhCG,QAAQC,IAAIZ,GACTI,KAAK,SAAAS,GACJ,IAAMC,EAAaD,EAAUlC,IAAI,SAAAoC,GAC/B,IAAMrC,EAAQ,GACRsC,EAAWC,OAAOC,OAAOH,EAAYI,WAO3C,OANAH,EAAS,GAAGI,QAAQ,SAAAC,GAClB3C,EAAM4C,KAAK,CACTvC,SAAUsC,EAAQ5C,KAClBQ,KAAM,MAGH,CACLR,KAAMuC,EAAS,GAAGf,OAClBzB,MAAOwC,EAAS,GAAG,GAAGxC,MAAM,GAAG,SAC/BE,WAGJoB,EAAKH,SAAS,CACZL,QAASwB,uCA4Bf,OACE1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQU,UAAU,cAChBZ,EAAAC,EAAAC,cAAA,0BAEEF,EAAAC,EAAAC,cAAA,OAAKC,IAAKgD,IAAMvC,UAAU,WAAWwC,IAAI,WAG7CpD,EAAAC,EAAAC,cAAA,UAAQmD,QAAS1B,KAAKH,eAAtB,YACAxB,EAAAC,EAAAC,cAAA,UAAQmD,QAAS1B,KAAKR,YAAtB,aACCQ,KAAKZ,MAAMG,QAAQX,IAAI,SAACsB,EAAQpB,GAAT,OACtBT,EAAAC,EAAAC,cAACoD,EAAD,CAAQ5C,IAAKD,EACXJ,KAAMwB,EAAOxB,KACbD,MAAOyB,EAAOzB,MACdE,MAAOuB,EAAOvB,UAChBqB,KAAKZ,MAAME,uBAlFHsC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC,kCE3HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.bd7d4f3a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Artist = (props) => {\r\n  return (\r\n    <div>\r\n      <img src={props.image} />\r\n      <h1>{props.name}</h1>\r\n      {props.songs.map((song, i) =>\r\n        <div key={i}>{song.nameSong} <i className=\"fas fa-heart\"></i><i className=\"far fa-thumbs-down\"></i>{song.like}</div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Artist","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Artist from './components/Artist'\n\n//Key API 108bddcd9fefc3e86bc16a18ad53e089\n\nclass App extends Component {\n  state = {\n    artistAlbum: [\n      'adele',\n      'rollingstone',\n      'madonna',\n      'michaeljackson',\n      'beatles',\n      'whitneyhouston'\n    ],\n    currentArtist: 0,\n    artists: []\n  }\n\n  componentDidMount() {\n    const { artistAlbum } = this.state;\n    const promisesArtist = artistAlbum.map(artist =>\n      fetch(`https://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist=${artist}&api_key=108bddcd9fefc3e86bc16a18ad53e089&format=json`)\n        .then(response => response.json())\n        .catch(err => console.error(err))\n    )\n    Promise.all(promisesArtist)\n      .then(arrArtist => {\n        const dataArtist = arrArtist.map(albumArtist => {\n          const songs = [];\n          const arrAlbum = Object.values(albumArtist.toptracks);\n          arrAlbum[0].forEach(objSong => {\n            songs.push({\n              nameSong: objSong.name,\n              like: 0\n            })\n          });\n          return {\n            name: arrAlbum[1].artist,\n            image: arrAlbum[0][0].image[3]['#text'],\n            songs\n          }\n        })\n        this.setState({\n          artists: dataArtist\n        })\n      })\n  }\n\n  handleNext = () => {\n    const { currentArtist, artistAlbum } = this.state;\n    if (currentArtist === artistAlbum.length - 1) {\n      this.setState({ currentArtist: 0 })\n    } else {\n      this.setState({\n        currentArtist: currentArtist + 1\n      })\n    }\n  }\n\n  handlePreview = () => {\n    const { currentArtist, artistAlbum } = this.state;\n    if (currentArtist === 0) {\n      this.setState({ currentArtist: 5 })\n    } else {\n      this.setState({\n        currentArtist: currentArtist - 1\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <header className=\"App-header\">\n          <h2>\n            Ranking Songs\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </h2>\n        </header>\n        <button onClick={this.handlePreview}>anterior</button>\n        <button onClick={this.handleNext}>siguiente</button>\n        {this.state.artists.map((artist, i) =>\n          <Artist key={i}\n            name={artist.name}\n            image={artist.image}\n            songs={artist.songs} />\n        )[this.state.currentArtist]}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}