{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","_this$state","state","currentArtist","artistAlbum","length","setState","image","name","songs","_this2","_this$state2","fetch","concat","then","response","json","arrArtistSongs","arrAlbum","values","toptracks","artist","forEach","objSong","push","nameSong","like","imageArtist","catch","err","console","error","react_default","a","createElement","className","src","logo","alt","onClick","map","song","i","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOAgFeA,qBAzEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAuCRQ,aAAe,WAAM,IAAAC,EACoBR,EAAKS,MAApCC,EADWF,EACXE,cACJA,GAFeF,EACIG,YACUC,OAC/BZ,EAAKa,SAAS,CAAEH,cAAe,IAE/BV,EAAKa,SAAS,CACZH,cAAeA,EAAgB,KA5CnCV,EAAKS,MAAQ,CACXE,YAAa,CACX,eACA,UACA,iBACA,UACA,kBAEFD,cAAe,EACfI,MAAO,GACPC,KAAM,GACNC,MAAO,IAbQhB,oFAiBE,IAAAiB,EAAAd,KAAAe,EAC2Bf,KAAKM,MAA3CE,EADWO,EACXP,YAAaD,EADFQ,EACER,cAAeM,EADjBE,EACiBF,MACpCG,MAAK,wEAAAC,OAAyET,EAAYD,GAArF,0DACFW,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,IAAMC,EAAWxB,OAAOyB,OAAOF,EAAeG,WACxCC,EAASH,EAAS,GAAGG,OAC3BH,EAAS,GAAGI,QAAQ,SAAAC,GAClBd,EAAMe,KAAK,CACTC,SAAUF,EAAQf,KAClBkB,KAAM,MAGV,IAAMC,EAAcT,EAAS,GAAG,GAAGX,MAAM,GAAG,SAC5CG,EAAKJ,SAAS,CACZC,MAAOoB,EACPnB,KAAMa,EACNZ,YAGHmB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,sCAe9B,OACEG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,0BAEEF,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,WAG7CN,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,UAAQK,QAAS3C,KAAKI,cAAtB,aACAgC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKE,IAAKxC,KAAKM,MAAMK,QACrByB,EAAAC,EAAAC,cAAA,UAAKtC,KAAKM,MAAMM,MACfZ,KAAKM,MAAMO,MAAM+B,IAAI,SAACC,EAAMC,GAAP,OAAaV,EAAAC,EAAAC,cAAA,OAAKS,IAAKD,GAAID,EAAKhB,SAAnB,IAA6BO,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAmBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAA0BM,EAAKf,iBAlEpIkB,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC,kCE3HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.5a95a0c9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n//Key API 108bddcd9fefc3e86bc16a18ad53e089\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      artistAlbum: [\n        'rollingstone',\n        'madonna',\n        'michaeljackson',\n        'beatles',\n        'whitneyhouston'\n      ],\n      currentArtist: 1,\n      image: '',\n      name: '',\n      songs: []\n    }\n  }\n\n  componentWillMount() {\n    const { artistAlbum, currentArtist, songs } = this.state;\n    fetch(`https://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist=${artistAlbum[currentArtist]}&api_key=108bddcd9fefc3e86bc16a18ad53e089&format=json`)\n      .then(response => response.json())\n      .then(arrArtistSongs => {\n        const arrAlbum = Object.values(arrArtistSongs.toptracks);\n        const artist = arrAlbum[1].artist;\n        arrAlbum[0].forEach(objSong => {\n          songs.push({\n            nameSong: objSong.name,\n            like: 0\n          })\n        });\n        const imageArtist = arrAlbum[0][0].image[3]['#text'];\n        this.setState({\n          image: imageArtist,\n          name: artist,\n          songs\n        })\n      })\n      .catch(err => console.error(err))\n  }\n\n  handleChange = () => {\n    const { currentArtist, artistAlbum } = this.state;\n    if (currentArtist >= artistAlbum.length) {\n      this.setState({ currentArtist: 0 })\n    } else {\n      this.setState({\n        currentArtist: currentArtist + 1\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <header className=\"App-header\">\n          <h2>\n            Ranking Songs\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </h2>\n        </header>\n        <button >anterior</button>\n        <button onClick={this.handleChange}>siguiente</button>\n        <div>\n          <img src={this.state.image} />\n          <h1>{this.state.name}</h1>\n          {this.state.songs.map((song, i) => <div key={i}>{song.nameSong} <i className=\"fas fa-heart\"></i><i className=\"far fa-thumbs-down\"></i>{song.like}</div>)}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}